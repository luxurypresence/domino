import logging
import uuid
from typing import Any

import boto3
import numpy as np
import pandas as pd

from s3_service import S3Service

# Set up logging configuration
logging.basicConfig(level=logging.INFO)

class PropertyLoader:

    def __init__(self, options: dict[str, Any], s3_service: S3Service = None) -> None:
        """Initializes the Unique Property ID workflow
        @param options: Configuration options for the workflow.
        @param s3_service: Service for interacting with AWS S3.
        """
        self.options = options
        self.s3_bucket = options.get('s3_bucket', 'lp-datalakehouse-stage/warehouse')
        self.s3_service = s3_service or S3Service()
        self.start_date = options.get('start_date')
        self.end_date = options.get('end_date')
        self.source_athena_database = options.get('source_athena_database', 'default')
        self.property_table_name = options.get('property_table_name', 'property')
        self.athena_query_path = f'domino-demo/athena-queries'
        self.temp_s3_path = f's3://{self.s3_bucket}/domino-demo/temp/{str(uuid.uuid4())}'
        self.state_column_name = options.get('state_column_name', 'state_or_province')
        self.city_column_name = options.get('city_column_name', 'city')
        self.timestamp_column_name = options.get('timestamp_column_name', 'event_modification_timestamp')
        self.limit = options.get('limit', 1000)

    def load_property_records(self, states=None) -> pd.DataFrame:
        """Load property records according to province/state, start time and end time.
        It only loads the latest property record filtering out the duplicated records.
        @param states: province/state names
        @return: property data frame
        """
        if self.s3_service.check_db_table_exists(self.source_athena_database, self.property_table_name):
            logging.info(f"Table {self.property_table_name} exists in db {self.source_athena_database}, reading data")
            sql = self.prepare_load_property_sql(states)
            df = self.s3_service.read_athena(sql,
                                             self.source_athena_database,
                                             s3_output=f's3://{self.s3_bucket}/{self.athena_query_path}/{str(uuid.uuid4())}/')
            return df
        logging.error(f"Table {self.property_table_name} does not exist in db {self.source_athena_database}")
        return pd.DataFrame()

    def prepare_load_property_sql(self, states: list=None) -> str:
        """Prepare the sql for loading property records.
        The sql only loads the latest property record filtering out the duplicated records.
        @param states: province or state names
        @return: prepared query sql
        """
        where_clauses = ["lp_full_address IS NOT NULL",
                         "lp_full_address != ''",
                         "lower(lp_full_address) not like '%undisclosed%'",
                         # "lp_property_type in ('HOUSE', 'CONDO', 'TOWNHOUSE', 'APARTMENT')",
                         "lp_provider_id = 'trestle-rebny'",
                         # "postal_code in ('10019', '10016', '10011')",
                         "lower(lp_listing_status)='active'",
                         "lp_listing_id in ('OLRS-0020529', 'OLRS-0023460', 'OLRS-23686', 'OLRS-0025345', 'OLRS-0025796', 'OLRS-0050908', 'OLRS-0065265', 'OLRS-0065786', 'OLRS-0070189', 'OLRS-0072534', 'OLRS-0079208', 'OLRS-0083821', 'OLRS-0090964', 'RLMX-91050', 'RLMX-92052', 'OLRS-0092944', 'RLMX-93017', 'OLRS-0093334', 'RLMX-93358', 'OLRS-0094127', 'OLRS-0094152', 'RLMX-94223', 'OLRS-0094389', 'RLMX-94462', 'OLRS-0094839', 'RLMX-95058', 'OLRS-0095254', 'RLMX-95267', 'RLMX-95776', 'OLRS-0095862', 'RLMX-96025', 'OLRS-0096053', 'OLRS-0096253', 'OLRS-0096255', 'OLRS-0096484', 'OLRS-0096726', 'OLRS-0096963', 'OLRS-0096964', 'OLRS-0097050', 'OLRS-0097081', 'OLRS-0097083', 'OLRS-0097084', 'OLRS-0097122', 'OLRS-0097153', 'OLRS-0097167', 'OLRS-0097195', 'OLRS-0097364', 'OLRS-0097471', 'OLRS-0097488', 'RLMX-97561', 'RLMX-97565', 'RLMX-97598', 'OLRS-0097708', 'OLRS-0097776', 'OLRS-0097778', 'OLRS-0098049', 'OLRS-0098113', 'OLRS-0098163', 'OLRS-0098165', 'OLRS-0098167', 'OLRS-0098169', 'OLRS-0098170', 'OLRS-0098183', 'OLRS-0098254', 'RLMX-98431', 'RLMX-98506', 'RLMX-98544', 'RLMX-98551', 'RLMX-98727', 'RLMX-98809', 'RLMX-98812', 'RLMX-98826', 'RLMX-98907', 'RLMX-98912', 'RLMX-99430', 'RLMX-99494', 'RLMX-99543', 'RLMX-99546', 'RLMX-99586', 'RLMX-99629', 'RLMX-99691', 'RLMX-99756', 'RLMX-99883', 'RLMX-99906', 'RLMX-99907', 'RLMX-99922', 'RLMX-99961', 'RLMX-99987', 'RLMX-100126', 'RLMX-100135', 'RLMX-100211', 'RLMX-100218', 'RLMX-100368', 'RLMX-100402', 'RLMX-100491', 'RLMX-100498', 'RLMX-100566', 'RLMX-100567', 'RLMX-100669', 'RLMX-100670', 'RLMX-100743', 'RLMX-100857', 'RLMX-100905', 'RLMX-101059', 'RLMX-101105', 'RLMX-101199', 'RLMX-101373', 'RLMX-101710', 'RLMX-101715', 'RLMX-101839', 'RLMX-101845', 'RLMX-101846', 'RLMX-101915', 'RLMX-101926', 'RLMX-101949', 'RLMX-101952', 'RLMX-102042', 'RLMX-102158', 'RLMX-102159', 'RLMX-102216', 'RLMX-102230', 'RLMX-102593', 'RLMX-102594', 'RLMX-102595', 'RLMX-102626', 'RLMX-102628', 'RLMX-102768', 'RLMX-102775', 'RLMX-102805', 'RLMX-102887', 'RLMX-102922', 'RLMX-102945', 'RLMX-102969', 'RLMX-102970', 'RLMX-102999', 'RLMX-103077', 'RLMX-103083', 'RLMX-103119', 'RLMX-103324', 'RLMX-103398', 'RLMX-103438', 'RLMX-103520', 'RLMX-103540', 'RLMX-103541', 'RLMX-103575', 'RLMX-103723', 'RLMX-103843', 'RLMX-103910', 'RLMX-103915', 'RLMX-103924', 'RLMX-103940', 'RLMX-103953', 'RLMX-103957', 'RLMX-104027', 'RLMX-104045', 'RLMX-104046', 'RLMX-104074', 'RLMX-104117', 'RLMX-104130', 'RLMX-104149', 'RLMX-104150', 'RLMX-104151', 'RLMX-104191', 'RLMX-104195', 'RLMX-104206', 'RLMX-104210', 'RLMX-104229', 'RLMX-104263', 'RLMX-104265', 'RLMX-104273', 'RLMX-104276', 'RLMX-104277', 'RLMX-104315', 'RLMX-104339', 'RLMX-104380', 'RLMX-104391', 'RLMX-104395', 'RLMX-104413', 'OLRS-148258', 'OLRS-000229897', 'OLRS-000236954', 'OLRS-257895', 'OLRS-290390', 'OLRS-353678', 'OLRS-380675', 'OLRS-384405', 'OLRS-415918', 'OLRS-456112', 'OLRS-719420', 'OLRS-895641', 'OLRS-0001101394', 'OLRS-0001120395', 'OLRS-0001158983', 'OLRS-1178924', 'OLRS-1348944', 'OLRS-0001426435', 'OLRS-1558676', 'OLRS-0001573425', 'OLRS-1584332', 'OLRS-1589508', 'OLRS-0001611204', 'OLRS-1763273', 'OLRS-1812047', 'OLRS-1820176', 'OLRS-1825384', 'OLRS-0001934166', 'OLRS-1951338', 'BNYC-1976294', 'OLRS-1987152', 'OLRS-2039611', 'OLRS-2078269', 'OLRS-2082168', 'OLRS-2083302', 'OLRS-2085821', 'OLRS-2088034', 'OLRS-2094098', 'OLRS-2096522', 'OLRS-2096843', 'OLRS-2097315', 'OLRS-2097372', 'OLRS-2097375', 'OLRS-2098906', 'OLRS-2099533', 'OLRS-2100323', 'OLRS-2102457', 'OLRS-2102778', 'OLRS-2103460', 'OLRS-2103468', 'OLRS-2106106', 'OLRS-2106128', 'OLRS-2106461', 'OLRS-2107248', 'OLRS-2107614', 'OLRS-2107636', 'OLRS-2107746', 'OLRS-2107827', 'OLRS-0002282334', 'OLRS-0002511022', 'OLRS-0002644458', 'OLRS-0002724054', 'OLRS-0002979781', 'PRCH-3769571', 'PRCH-4303067', 'PRCH-7585015', 'PRCH-7646365', 'PRCH-7709620', 'PRCH-7715123', 'PRCH-7734618', 'PRCH-7737467', 'PRCH-7741888', 'PRCH-7753535', 'PRCH-7756087', 'PRCH-7803944', 'PRCH-7808621', 'PRCH-7822550', 'PRCH-7848414', 'PRCH-7852487', 'PRCH-7853714', 'PRCH-7854634', 'PRCH-7924145', 'PRCH-7951513', 'PRCH-8350385', 'PRCH-8350473', 'PRCH-8352278', 'PRCH-8355630', 'PRCH-8355672', 'PRCH-8355716', 'PRCH-8355741', 'PRCH-8361301', 'PRCH-8361306', 'PRCH-8361313', 'PRCH-8366055', 'PRCH-8366108', 'PRCH-8366914', 'PRCH-8367738', 'PRCH-8370062', 'PRCH-8373214', 'PRCH-8375286', 'OLRS-00010029642', 'OLRS-00010065786', 'OLRS-00010072534', 'OLRS-00010078145', 'OLRS-00010080351', 'OLRS-00010082723', 'OLRS-00010084525', 'OLRS-00010090167', 'OLRS-00010092907', 'OLRS-00010094384', 'OLRS-00010096255', 'OLRS-00010097828', 'OLRS-00011047350', 'OLRS-00011109323', 'OLRS-00011317206', 'OLRS-00011319015', 'OLRS-00011497693', 'OLRS-00011513510', 'OLRS-00011520775', 'OLRS-00011543576', 'OLRS-00011557476', 'OLRS-00011566987', 'OLRS-00011584332', 'OLRS-00011586882', 'OLRS-00011702325', 'OLRS-00011806600', 'OLRS-00011841720', 'OLRS-00011853840', 'OLRS-00011858413', 'OLRS-00011872815', 'OLRS-00011908821', 'OLRS-00011927062', 'OLRS-00011929529', 'OLRS-00011942796', 'OLRS-00011961824', 'OLRS-00011962191', 'OLRS-00011982818', 'OLRS-00011995410', 'OLRS-00011995808', 'OLRS-00011998804', 'OLRS-00011999114', 'OLRS-00012000412', 'OLRS-00012000886', 'OLRS-00012000996', 'OLRS-00012029966', 'OLRS-00012037126', 'OLRS-00012058451', 'OLRS-00012069258', 'OLRS-00012083967', 'PRCH-20970645', 'PRCH-21000893', 'PRCH-21011926', 'PRCH-21018313', 'PRCH-21018324', 'OLRS-00021284497', 'OLRS-00021470425', 'OLRS-00021880507', 'OLRS-00021898693', 'OLRS-00022000894', 'OLRS-00022001081', 'OLRS-00022031478', 'OLRS-00030093008', 'PRCH-35044292', 'PRCH-35047916', 'PRCH-35075013', 'PRCH-35095507', 'PRCH-35097407', 'PRCH-35111790', 'PRCH-35121045', 'PRCH-35124042', 'PRCH-35158701', 'PRCH-35166029', 'PRCH-35181515', 'PRCH-35184789', 'PRCH-35194311', 'PRCH-35198793', 'PRCH-35201949', 'PRCH-35211275', 'PRCH-35216590', 'PRCH-35227703', 'PRCH-35233722', 'PRCH-35239855', 'PRCH-35244229', 'PRCH-35247473', 'PRCH-35249576', 'PRCH-36909865', 'PRCH-36913390', 'PRCH-36915014', 'PRCH-36941876', 'PRCH-36944782', 'PRCH-36946465', 'PRCH-36948955', 'PRCH-36956942', 'PRCH-36957737', 'PRCH-36966958', 'PRCH-36975275', 'PRCH-36975277', 'PRCH-36978776', 'PRCH-36978779', 'OLRS-00041953770', 'OLRS-00042072564', 'RLMX-004590011076', 'RPLU-5121683820', 'RPLU-5121979024', 'RPLU-5122036447', 'RPLU-5122036459', 'RPLU-5122036505', 'RPLU-5122151833', 'RPLU-5122341911', 'RPLU-5122398511', 'RPLU-5122412717', 'RPLU-5122418845', 'RPLU-5122575793', 'RPLU-5122646908', 'RPLU-5122662314', 'RPLU-5122666693', 'RPLU-5122875926', 'RPLU-5122899220', 'RPLU-5122906518', 'RPLU-5122917476', 'RPLU-5122919162', 'RPLU-5122941857', 'RPLU-5122941880', 'RPLU-5122941883', 'RPLU-5122941895', 'RPLU-5122957662', 'RPLU-5122976366', 'RPLU-5122981145', 'RPLU-5122988091', 'RPLU-5123023625', 'RPLU-5123031061', 'RPLU-5123032999', 'RPLU-5123035427', 'RPLU-5123037219', 'RPLU-5123045868', 'RPLU-5123064820', 'RPLU-5123069378', 'RPLU-5123074855', 'RPLU-5123103983', 'RPLU-5123108371', 'RPLU-5123110087', 'RPLU-5123116507', 'RPLU-5123120242', 'RPLU-5123124876', 'RPLU-5123133560', 'RPLU-5123146118', 'RPLU-5123161025', 'RPLU-5123167835', 'RPLU-5123169976', 'RPLU-5123184371', 'RPLU-5123186091', 'RPLU-5123186118', 'RPLU-5123186207', 'RPLU-5123186222', 'RPLU-5123187934', 'RPLU-5123189094', 'RPLU-5123189169', 'RPLU-5123200020', 'RPLU-5123201144', 'RPLU-5123202973', 'RPLU-5123202980', 'RPLU-5123205480', 'RPLU-5123211235', 'RPLU-5123213365', 'RPLU-5123213476', 'RPLU-5123214044', 'RPLU-5123215180', 'RPLU-5123219713', 'RPLU-5123221086', 'RPLU-5123221941', 'RPLU-5123223207', 'RPLU-5123228971', 'RPLU-5123229860', 'RPLU-5123234975', 'RPLU-5123235587', 'RPLU-5123235979', 'RPLU-5123237229', 'RPLU-5123237389', 'RPLU-5123241257', 'RPLU-5123242125', 'RPLU-5123247430', 'RPLU-5123252791', 'RPLU-5123252851', 'RPLU-5123259396', 'RLMX-012130023559', 'RPLU-21919831439', 'RPLU-21921613047', 'RPLU-21922123585', 'RPLU-21922272241', 'RPLU-21922399767', 'RPLU-21922465198', 'RPLU-21922577034', 'RPLU-21922620441', 'RPLU-21922792788', 'RPLU-21923003531', 'RPLU-21923016078', 'RPLU-21923018060', 'RPLU-21923028742', 'RPLU-21923032934', 'RPLU-21923051754', 'RPLU-21923109355', 'RPLU-21923165026', 'RPLU-21923167479', 'RPLU-21923198625', 'RPLU-21923202791', 'RPLU-21923204633', 'RPLU-21923205399', 'RPLU-21923260653', 'RPLU-33421742655', 'RPLU-33422583639', 'RPLU-33422636374', 'RPLU-33422730803', 'RPLU-33422742967', 'RPLU-33422790383', 'RPLU-33422833364', 'RPLU-33422878007', 'RPLU-33422914357', 'RPLU-33422958991', 'RPLU-33422974599', 'RPLU-33422974931', 'RPLU-33422976459', 'RPLU-33422979940', 'RPLU-33422980908', 'RPLU-33423014301', 'RPLU-33423024871', 'RPLU-33423034720', 'RPLU-33423035121', 'RPLU-33423044047', 'RPLU-33423104757', 'RPLU-33423118438', 'RPLU-33423125640', 'RPLU-33423128779', 'RPLU-33423145320', 'RPLU-33423151890', 'RPLU-33423155745', 'RPLU-33423164346', 'RPLU-33423171689', 'RPLU-33423172177', 'RPLU-33423174669', 'RPLU-33423174680', 'RPLU-33423175154', 'RPLU-33423176013', 'RPLU-33423177517', 'RPLU-33423181797', 'RPLU-33423185009', 'RPLU-33423197650', 'RPLU-33423205189', 'RPLU-33423206629', 'RPLU-33423209755', 'RPLU-33423213578', 'RPLU-33423215205', 'RPLU-33423215406', 'RPLU-33423221560', 'RPLU-33423224097', 'RPLU-33423230018', 'RPLU-33423231045', 'RPLU-33423233530', 'RPLU-33423233566', 'RPLU-33423234478', 'RPLU-33423238813', 'RPLU-33423242270', 'RPLU-33423245474', 'RPLU-33423248813', 'RPLU-33423249727', 'RPLU-33423250101', 'RPLU-33423254502', 'RPLU-33423256806', 'RPLU-33423258308', 'RPLU-33423260501', 'RPLU-63222228212', 'RPLU-63222493117', 'RPLU-63222507869', 'RPLU-63222723659', 'RPLU-63222782967', 'RPLU-63222791799', 'RPLU-63222882290', 'RPLU-63222926049', 'RPLU-63222932890', 'RPLU-63222936899', 'RPLU-63222972446', 'RPLU-63222972655', 'RPLU-63222996322', 'RPLU-63223016820', 'RPLU-63223018576', 'RPLU-63223020093', 'RPLU-63223024805', 'RPLU-63223043422', 'RPLU-63223084158', 'RPLU-63223085917', 'RPLU-63223124240', 'RPLU-63223127881', 'RPLU-63223130678', 'RPLU-63223151691', 'RPLU-63223157366', 'RPLU-63223173073', 'RPLU-63223179982', 'RPLU-63223180728', 'RPLU-63223203570', 'RPLU-63223206593', 'RPLU-63223214090', 'RPLU-63223221551', 'RPLU-63223227191', 'RPLU-63223229842', 'RPLU-63223230107', 'RPLU-63223231418', 'RPLU-63223231701', 'RPLU-63223233600', 'RPLU-63223237567', 'RPLU-63223237752', 'RPLU-63223238783', 'RPLU-63223239545', 'RPLU-63223240043', 'RPLU-63223248570', 'RPLU-63223252871', 'RSFT-00110000000286', 'RSFT-00110000000306', 'RSFT-00110000000307', 'RSFT-00120000006138', 'RSFT-00120000006154', 'RSFT-00120000006223', 'RPLU-284023256336', 'RPLU-455222651335', 'RPLU-455223214983', 'RPLU-455223253041', 'RPLU-476623202661', 'RPLU-601822745294', 'RPLU-618221619928', 'RPLU-618222027544', 'RPLU-618222151938', 'RPLU-618222285385', 'RPLU-618222369855', 'RPLU-618222372073', 'RPLU-618222372350', 'RPLU-618222576119', 'RPLU-618222610336', 'RPLU-618222620597', 'RPLU-618222645655', 'RPLU-618222736924', 'RPLU-618222803938', 'RPLU-618222871198', 'RPLU-618222943171', 'RPLU-618223027110', 'RPLU-618223059334', 'RPLU-618223105933', 'RPLU-618223198261', 'RPLU-618223218014', 'RPLU-618223250838', 'RPLU-622022938407', 'RPLU-622023183939', 'RPLU-756521828661', 'RPLU-798323224619', 'RPLU-810123092058', 'RPLU-810123096650', 'RPLU-810123125731', 'RPLU-810123197881', 'RPLU-810123209174', 'RPLU-810123228876', 'RPLU-810123237597', 'RPLU-850722049239', 'RPLU-850722603906', 'RPLU-850722645502', 'RPLU-850722660979', 'RPLU-850722918664', 'RPLU-850722934388', 'RPLU-850722948904', 'RPLU-850722950211', 'RPLU-850722960702', 'RPLU-850722976063', 'RPLU-850722979150', 'RPLU-850722979923', 'RPLU-850722994028', 'RPLU-850723016420', 'RPLU-850723016423', 'RPLU-850723016747', 'RPLU-850723024926', 'RPLU-850723076848', 'RPLU-850723080678', 'RPLU-850723094410', 'RPLU-850723123803', 'RPLU-850723158545', 'RPLU-850723167580', 'RPLU-850723198237', 'RPLU-850723211595', 'RPLU-850723213776', 'RPLU-850723224169', 'RPLU-850723239354', 'RPLU-850723239796', 'RPLU-1032522873830', 'RPLU-1032522874300', 'RPLU-1032522874301', 'RPLU-1032522958606', 'RPLU-1032522965826', 'RPLU-1032522985083', 'RPLU-1032523003249', 'RPLU-1032523004976', 'RPLU-1032523066064', 'RPLU-1032523093101', 'RPLU-1032523127903', 'RPLU-1032523154540', 'RPLU-1032523209702', 'RPLU-1032523211567', 'RPLU-1032523221552', 'RPLU-1032523237065', 'RPLU-1032523253022', 'RPLU-1086922371161', 'RPLU-1086922581275', 'RPLU-1086922997046', 'RPLU-1086923059855', 'RPLU-1086923103257', 'RPLU-1086923183751', 'RPLU-1336523187996', 'RPLU-1336523206208', 'COMP-1028288726393059337', 'COMP-1044261925146742785', 'COMP-1073874865398307513', 'COMP-1073875481516409729', 'COMP-1134660156772746257', 'COMP-1160221207456154689', 'COMP-1231087906335716105', 'COMP-1241485603674968465', 'COMP-1263104319027553769', 'COMP-1304429945676227761', 'COMP-1334197106944638753', 'COMP-1358892558767100129', 'COMP-1373528583716575065', 'COMP-1388437577056308105', 'COMP-1397848794174774329', 'COMP-1398673484657691289', 'COMP-1414057768284297713', 'COMP-1436407334828845129', 'COMP-1436460808857829281', 'COMP-1438517080964383913', 'COMP-1494968736776591057', 'COMP-1497261247040023473', 'COMP-1504560063073054049', 'COMP-1505362808172668593', 'COMP-1505847278269884833', 'COMP-1510271152733883393', 'COMP-1515425750949508801', 'COMP-1517462717684409937', 'COMP-1522081953441679065', 'COMP-1532905853672731009', 'COMP-1545857564879067849', 'COMP-1547869371349553377', 'COMP-1550007885520399697', 'COMP-1555844860911569033', 'COMP-1560950891091055521', 'COMP-1562793418388992481', 'COMP-1564175499597512553', 'COMP-1566040567294000449', 'COMP-1566649501617066089', 'COMP-1567495751699113169', 'COMP-1571825143908990513', 'COMP-1571933165339854425', 'COMP-1572638421904287593', 'COMP-1572678218651844553', 'COMP-1575827621985933217', 'COMP-1576106955267332465', 'COMP-1576724244191068073', 'COMP-1578293122336349425', 'COMP-1579308497165476705', 'COMP-1581441746193335569', 'COMP-1586228083644102097', 'COMP-1586236217574073761', 'COMP-1587176725117662809', 'COMP-1588661239778416649', 'COMP-1590744201340853209', 'COMP-1591259149237754305', 'COMP-1592821445178061793', 'COMP-1593654020033549825', 'COMP-1594914606390349417', 'COMP-1596750905325669729', 'COMP-1597126731254797809', 'COMP-1597149764770014809', 'COMP-1598023107036980129', 'COMP-1598466006380078129', 'COMP-1598900068827608337', 'COMP-1598900280480466505', 'COMP-1599708891909679513', 'COMP-1600098047748199073', 'COMP-1600313958816227969', 'COMP-1600885881408902177', 'COMP-1600893304278402521', 'COMP-1601096981796605137', 'COMP-1601172227230977793', 'COMP-1603041749260979113', 'COMP-1604095410006126161', 'COMP-1606646355896068113', 'COMP-1612528132439870097', 'COMP-1612645768137999425', 'COMP-1615930101813566681', 'COMP-1616033953804701129', 'COMP-1617515355968373561', 'COMP-1622470612908695729', 'COMP-1622603123076806961', 'COMP-1622727575885905529', 'COMP-1623218797771651233', 'COMP-1623959750280275713', 'COMP-1626795694196208833', 'COMP-1627678941656003193', 'COMP-1627740055777465921', 'COMP-1627741207465543745', 'COMP-1631152331419512057', 'COMP-1631228942630597225', 'COMP-1631235707120164569', 'COMP-1631240054457564601', 'COMP-1634158284719157929', 'COMP-1634199214725987889', 'COMP-1636449816503481273', 'COMP-1637011825964067761', 'COMP-1638656181366130905', 'COMP-1639260620393536617', 'COMP-1639472938880434977', 'COMP-1640048978786674161', 'COMP-1641339597199235881', 'COMP-1642862667948992665', 'COMP-1643014267191722529', 'COMP-1643634096278961985', 'COMP-1647940439374622817', 'COMP-1649314408791143777', 'COMP-1649481302051527089', 'COMP-1651465970669647025', 'COMP-1651690087004080009', 'COMP-1652267833590505625', 'COMP-1652389380779563401', 'COMP-1652625139931046953', 'COMP-1652651194763197713', 'COMP-1653087286297412553', 'COMP-1653809857553206081', 'COMP-1654387503898625521', 'COMP-1655237396959534561', 'COMP-1657273867983641369', 'COMP-1658345314333037049', 'COMP-1661684773988972089', 'COMP-1661765218533397433', 'COMP-1663821335494630033', 'COMP-1663879906986800049', 'COMP-1663891303381073697', 'COMP-1663899797962031409', 'COMP-1666753533903267761', 'COMP-1666880324063814761', 'COMP-1667606033422999721', 'COMP-1668078371360461433', 'COMP-1668254108286138489', 'COMP-1668300016553865249', 'COMP-1669226463619188897', 'COMP-1671847755451965913', 'COMP-1671921473406547665', 'COMP-1674030382880363265', 'COMP-1674152298639627961', 'COMP-1674179785097031889', 'COMP-1674625304830770481', 'COMP-1674664876789264937', 'COMP-1675952218048982105', 'COMP-1676878587171509657', 'COMP-1678263033280950097', 'COMP-1679125010216594385', 'COMP-1679157401894986137', 'COMP-1679165774380144289', 'COMP-1683394632151751489', 'COMP-1684255452700463401', 'COMP-1687705570193539785', 'COMP-1687763319854214937', 'COMP-1687834880686195489', 'COMP-1687868131073292921', 'COMP-1687934018254174929', 'COMP-1689216322633297409', 'COMP-1690062557465025689', 'COMP-1690914971956798409', 'COMP-1692205276845515385', 'COMP-1692880533047411593', 'COMP-1692882975591777929', 'COMP-1692976956094756921', 'COMP-1693475058660953377', 'COMP-1693803675186021017', 'COMP-1694297153749568729', 'COMP-1695013410850147689', 'COMP-1697218610109352377', 'COMP-1697335308019627609', 'COMP-1698937623458366481', 'COMP-1699321743153892657', 'COMP-1699481757370922057', 'COMP-1700225521102120465', 'COMP-1700326410294492937', 'COMP-1700396640383759569', 'COMP-1702416530636040561', 'COMP-1702962826845723313', 'COMP-1703127448319631569', 'COMP-1703642892053580409', 'COMP-1703843709666251289', 'COMP-1704022342104489353', 'COMP-1704415554463451433', 'COMP-1705214924582711849', 'COMP-1705258241987142361', 'COMP-1705398161753928793', 'COMP-1707319189400742457', 'COMP-1707598032607303713')"
                         ]
        if states:
            # remove the empty state
            states = [f"'{state}'" for state in states if state]
            if states:
                where_clauses.append(f"state_or_province in ({','.join(states)})")
        if self.start_date:
            where_clauses.append(
                f"{self.timestamp_column_name} >= cast('{self.start_date.replace('T', ' ')}' as timestamp)")
        if self.end_date:
            where_clauses.append(
                f"{self.timestamp_column_name} <= cast('{self.end_date.replace('T', ' ')}' as timestamp)")
        where_clause = " AND ".join(where_clauses)

        query = f"""
            SELECT lp_provider_id,lp_listing_id,listing_id,lp_full_address,lp_formatted_address,lp_property_type,
                   association_amenities,interior_features,appliances,exterior_features,lot_features,architectural_style,
                   community_features,list_price,price_range,lp_photos,bedrooms_total,
                   lp_calculated_bath,lp_listing_description,lp_sale_lease,
                   accessibility_features,building_features,fireplace_features,laundry_features,parking_features,pool_features,security_features,waterfront_features,
                   country,state_or_province,county_or_parish,city,lp_processed_timestamp,event_modification_timestamp
            FROM (
                SELECT lp_provider_id,lp_listing_id, listing_id, lower(lp_full_address) as lp_full_address,
                       association_amenities,interior_features,appliances,exterior_features,lot_features,architectural_style,
                       community_features,list_price,price_range,lp_photos,bedrooms_total,
                       lp_calculated_bath,lp_listing_description,lp_sale_lease,
                       accessibility_features,building_features,fireplace_features,laundry_features,parking_features,pool_features,security_features,waterfront_features,
                       CAST(lp_processed_timestamp AS timestamp(3)) AS lp_processed_timestamp,
                       lp_formatted_address, country, state_or_province,lower(city) as city,county_or_parish,
                       lp_property_type,
                       CAST(event_modification_timestamp AS timestamp(3)) AS event_modification_timestamp,
                       ROW_NUMBER() OVER (PARTITION BY lp_provider_id, lp_listing_id 
                                          ORDER BY event_modification_timestamp DESC, lp_processed_timestamp DESC) AS rn
                FROM {self.source_athena_database}.{self.property_table_name}
                WHERE {where_clause}
            )
            WHERE rn = 1
            limit {self.limit}
        """

        return query


def query_property_records_from_datalake() -> list:
    pd.set_option('display.max_columns', None)
    boto3.setup_default_session(profile_name='data-staging')
    options = {
        'start_date': '2024-05-13T00:00:00',
        'end_date': '2024-11-13T00:00:00',
        'timestamp_column_name': 'event_modification_timestamp',
        's3_bucket': 'lp-datalakehouse-stage/warehouse',
        'source_athena_database': 'lp_data_model_stage',
        'source_data_table': 'property',
        'limit': 1000,
    }
    loader = PropertyLoader(options)
    try:

        df =  loader.load_property_records()
        df['list_price'] = df['list_price'].astype(float)
        df['bedrooms_total'] = df['bedrooms_total'].astype(int)
        df['lp_calculated_bath'] = df['lp_calculated_bath'].astype(float)
        # Remove non-numeric characters from lp_listing_id
        df['id'] = df['lp_listing_id'].str.replace(r'\D', '', regex=True).astype(int)
        # Extract photo_url from lp_photos and set it as a list in the lp_photos column
        # Sort each list of photos by the 'photo_url' key and then extract the 'photo_url' values
        df['lp_photos'] = df['lp_photos'].apply(
            lambda photos: [photo['photo_url'] for photo in sorted(photos, key=lambda x: x['photo_url'])])

        # Convert each specified column to a list if it's an ndarray
        columns_to_convert = [
            'association_amenities', 'interior_features', 'appliances', 'exterior_features',
            'community_features', 'accessibility_features', 'building_features', 'fireplace_features',
            'laundry_features', 'parking_features', 'pool_features', 'security_features', 'waterfront_features',
            'lot_features', 'architectural_style',
        ]
        for col in columns_to_convert:
            if col in df.columns:  # Check if column exists in the DataFrame
                df[col] = df[col].apply(lambda x: x.tolist() if isinstance(x, np.ndarray) else x)

        return df.to_dict(orient='records')
    except Exception as ex:
        logging.error(f"Property records loading failed, error: {ex}")
        raise
    finally:
        logging.info(f"Deleting the temp path on s3 bucket: {f's3://{loader.s3_bucket}/{loader.athena_query_path}'}")
        loader.s3_service.wr_client.s3.delete_objects(f's3://{loader.s3_bucket}/{loader.athena_query_path}')